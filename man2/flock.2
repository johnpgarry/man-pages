.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" May be distributed under the GNU General Public License
.TH FLOCK 2 "22 July 1993" "Linux 0.99.11" "Linux Programmer's Manual"
.SH NAME
flock \- apply or remove an advisory lock on an open file
.SH SYNOPSIS
.B #include <sys/file.h>
.sp
.BR "int flock(int " fd ", int " operation )
.SH DESCRIPTION
Apply or remove an advisory lock on an open file.  The file is specified by
.IR fd .
Valid operations are given below:
.RS
.sp
.TP 1.0i
LOCK_SH
Shared lock.  More than one process may hold a shared lock for a given file
at a given time.
.TP
LOCK_EX
Exclusive lock.  Only one process may hold an exclusive lock for a given
file at a given time.
.TP
LOCK_UN
Unlock.
.TP
LOCK_NB
Don't block when locking.  May be specified (by
.IR or 'ing)
along with one of the other operations.
.sp
.RE

A single file may not simultaneously have both shared and exclusive locks.

A file is locked (i.e., the inode),
.I not
the file description.  So,
.BR dup (2)
and
.BR fork (2)
do not create multiple instances of a lock.
.SH "RETURN VALUE"
On success, zero is returned.  On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EWOULDBLOCK
The file is locked an the
.B LOCK_NB
flag was selected.
.SH NOTES
Under Linux,
.B flock
is implemented as a call to
.BR fcntl .
Please see
.BR fcntl (2)
for more details on errors.
.SH "SEE ALSO"
.BR open "(2), " close "(2), " dup "(2), " execve "(2), " fcntl "(2), "
.BR fork "(2), "
