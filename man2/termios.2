.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1993 Michael Haardt
.\" (u31b3hs@pool.informatik.rwth-aachen.de)
.\" Fri Apr  2 11:32:09 MET DST 1993
.\" This file may be distributed under the GNU General Public License.
.\"
.\" Modified Sat Jul 24 15:37:39 1993 by Rik Faith (faith@cs.unc.edu)
.\"
.TH TERMIOS 2 "January 21, 1993" "Linux" "Linux Programmer's Manual"
.SH NAME
termios, tcgetattr, tcsetattr, tcsendbreak, tcdrain, tcflush, tcflow,
cfgetospeed, cfgetispeed, cfsetispeed, cfsetospeed \- get and set
terminal attributes, line control, get and set baud rate, get and set
terminal foreground process group ID
.SH SYNOPSIS
.ad l
.ft B
#include <termios.h>
.br
#include <unistd.h>
.sp
int tcgetattr(int fd, struct termios *termios_p);
.sp
int tcsetattr(int fd, int optional_actions, struct termios *termios_p);
.sp
int tcsendbreak(int fd, int duration);
.sp
int tcdrain(int fd);
.sp
int tcflush(int fd, int queue_selector);
.sp
int tcflow(int fd, int action);
.sp
speed_t cfgetospeed(struct termios *termios_p);
.sp
int cfsetospeed(struct termios *termios_p, speed_t speed);
.sp
speed_t cfgetispeed(struct termios *termios_p);
.sp
int cfsetispeed(struct termios *termios_p, speed_t speed);
.ft P
.ad b
.SH DESCRIPTION
The termios functions describe a general terminal interface that is
provided to control asynchronous communications ports.
.LP
Many of the functions described here have a \fItermios_p\fP argument
that is a pointer to a \fBtermios\fP structure.  This structure contains
the following members:
.ne 9
.sp
.RS
.nf
tcflag_t c_iflag;      /* input modes */
tcflag_t c_oflag;      /* output modes */
tcflag_t c_cflag;      /* control modes */
tcflag_t c_lflag;      /* local modes */
cc_t c_cc[NCCS];       /* control chars */
.RE
.sp
.fi
.B tcgetattr()
gets the parameters associated with the object referred by \fIfd\fP and
stores them in the \fBtermios\fP structure referenced by
\fItermios_p\fP.  This function may be invoked from a background process;
however, the terminal attributes may be subsequently changed by a
foreground process.
.LP
.B tcsetattr()
sets the parameters associated with the terminal (unless support is
required from the underlying hardware that is not available) from the
\fBtermios\fP structure referred to by \fItermios_p\fP as follows:
.IP TCSANOW
the change occurs immediately.
.IP TCSADRAIN
the change occurs after all output written to
.I fd
has been transmitted.  This function should be used when changing
parameters that affect output.
.IP TCSAFLUSH
the change occurs after all output written to the object referred by
.I fd
has been transmitted, and all input that has been received but not read
will be discarded before the change is made.
.LP
.B tcsendbreak()
transmits a continuous stream of zero-valued bits for a specific
duration, if the terminal is using asynchronous serial data
transmission.  If \fIduration\fP is zero, it transmits zero-valued bits
for at least 0.25 seconds, and not more that 0.5 seconds.  If
\fIduration\fP is not zero, it sends zero-valued bits for
.IB duration * N
seconds, where \fIN\fP is at least 0.25, and not more than 0.5.
.LP
If the terminal is not using asynchronous serial data transmission,
\fBtcsendbreak()\fP returns without taking any action.
.LP
.B tcdrain()
waits until all output written to the object referred to by
.I fd
has been transmitted.
.LP
.B tcflush()
discards data written to the object referred to by
.I fd
but not transmitted, or data received but not read, depending on the
value of
.IR queue_selector :
.IP TCIFLUSH
flushes data received but not read.
.IP TCOFLUSH
flushes data written but not transmitted.
.IP TCIOFLUSH
flushes both data received but not read, and data written but not
transmitted.
.LP
The default on open of a terminal file is that neither its input nor its
output is suspended.
.LP
.B tcflow()
suspends transmission or reception of data on the object referred to by
.IR fd ,
depending on the value of
.IR actions :
.IP TCOOFF
suspends output.
.IP TCOON
restarts suspended output.
.IP TCIOFF
transmits a STOP character, which stops the terminal device from transmitting data to the
system.
.IP TCION
transmits a START character, which starts the terminal device transmitting data to the
system.
.LP
The baud rate functions are provided for getting and setting the values
of the input and output baud rates in the \fBtermios\fP structure.  The
effects on the terminal device described below do not become effective
until \fBtcsetattr()\fP is successfully called.
.LP
The input and output baud rates are stored in the \fBtermios\fP
structure.
.LP
.B cfgetospeed()
returns the output baud rate stored in the \fBtermios\fP structure
pointed to by
.IR termios_p .
.LP
.B cfsetospeed()
sets the output baud rate stored in the \fBtermios\fP structure pointed
to by \fItermios_p\fP to
.IR speed .
The zero baud rate,
.BR B0 ,
is used to terminate the connection.  If
.B B0
is specified, the modem control lines shall no longer be asserted.
Normally, this will disconnect the line.
.LP
If the input baud rate is set to zero, the input baud rate will be
specified by the value of the output baud rate.
.LP
.B cfgetispeed()
returns the input baud rate stored in the \fBtermios\fP structure.
.LP
.B cfsetispeed()
sets the input baud rate stored in the \fBtermios\fP structure to
.IR speed .
.SH "RETURN VALUES"
.LP
.B cfgetispeed()
returns the input baud rate stored in the
\fBtermios\fP
structure.
.LP
.B cfgetospeed()
returns the output baud rate stored in the
\fBtermios\fP
structure.
.LP
.B cfsetispeed()
and
.B cfsetospeed()
return:
.IP 0
on success.
.IP \-1
on failure and sets
.B errno
to indicate the error.
.LP
All other functions return:
.IP 0
on success.
.IP \-1
on failure and set
.B errno
to indicate the error.
