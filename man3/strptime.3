.\" Copyright 1993 Mitchum DSouza <m.dsouza@mrc-apu.cam.ac.uk>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified, jmv@lucifer.dorms.spbu.ru, 1999-11-08
.\" Modified, aeb, 2000-04-07
.\"
.TH STRPTIME 3 1994-09-26 "GNU" "Linux Programmer's Manual"
.SH NAME
strptime \- convert a string representation of time to a time tm structure
.SH SYNOPSIS
.BR "#define _XOPEN_SOURCE" " /* glibc2 needs this */"
.br
.B #include <time.h>
.sp
.BI "char *strptime(const char *" s ", const char *" format ,
.BI "struct tm *" tm );
.SH DESCRIPTION
.LP
.IX  "strptime function"  ""  "\fLstrptime()\fP \(em date and time conversion"
.B strptime(\|)
is the complementary function to
.B strftime(\|)
and converts the character string pointed to by
.I s
to values which are stored in the
.B tm
structure pointed to by
.IR tm ,
using the format specified by
.IR format .
Here
.I format
is a character string that consists of field descriptors and text characters,
reminiscent of
.BR scanf (3).
Each field descriptor consists of a
.B %
character followed by another character that specifies the replacement for the
field descriptor.
All other characters in the 
.I format 
string must have a matching character in the input string.  Exceptions
are white spaces in the format string which can match zero or more
white space characters in the input string.
.PP
The \fBstrptime()\fP function processes the input string from right to
left.  Each of the three possible input elements (white space,
literal, or format) are handled one after the other.  If the input
cannot be matched to the format string the function stops.  The
remainder of the format and input strings are not processed.
.PP
The following field descriptors are supported:
.TP
.B %%
the
.B %
character
.TP
.BR %a " or " %A
day of week, using locale's weekday names;
either the abbreviated or full name may be specified
.TP
.BR %b " or " %B " or " %h
month, using locale's month names;
either the abbreviated or full name may be specified
.TP
.B %c
date and time as %x %X
.TP
.B %C
date and time, in locale's long-format date and time representation
.TP
.BR %d " or " %e
day of month (1-31; leading zeroes are permitted but not required)
.TP
.B %D
date as %m/%d/%y
.TP
.BR %H " or " %k
hour (0-23; leading zeroes are permitted but not required)
.PD
.TP
.BR %I " or " %l
hour (0-12; leading zeroes are permitted but not required)
.PD
.TP
.B %j
day number of year (001-366)
.TP
.B %m
month number (1-12; leading zeroes are permitted but not required)
.TP
.B %M
minute (0-59; leading zeroes are permitted but not required)
.TP
.B %p
locale's equivalent of
.SM AM
or
.SM PM
.TP
.B %r
time as %I:%M:%S %p
.TP
.B %R
time as %H:%M
.TP
.B %S
seconds (0-61; leading zeroes are permitted but not required. Extra second
allowed for leap years)
.TP
.B %T
time as %H:%M:%S
.TP
.B %w
weekday number (0-6) with Sunday as the first day of the week 
.TP
.B %x
date, using locale's date format
.TP
.B %X
time, using locale's time format
.TP
.B %y
year within century (0-99; leading zeroes are permitted but not required.
When a century is not otherwise specified, values in the range 69-99 refer
to years in the twentieth century (1969 to 1999 inclusive); values in the
range 00-68 refer to years in the twenty-first century (2000 to 2068
inclusive).
.TP
.B %Y
year, including century (for example, 1988)
.LP
Case is ignored when matching items such as month or weekday names.
.LP
Some field descriptors can be modified by the E and O modifier characters
to indicate that an alternative format or specification should be used. If the
alternative format or specification does not exist in the current locale, the
unmodified field descriptors is used.
.LP
The E modifier specifies that the input string may contain
alternative locale-dependent versions of the date and time representation:
.TP
.B %Ec
the locale's alternative date and time representation.
.TP
.B %EC
the name of the base year (period) in the locale's alternative representation.
.TP
.B %Ex
the locale's alternative date representation.
.TP
.B %EX
the locale's alternative time representation.
.TP
.B %Ey
the offset from %EC (year only) in the locale's alternative representation.
.TP
.B %EY
the full alternative year representation.
.LP
The O modifier specifies that the numerical input may be in an
alternative locale-dependent format:
.TP
.BR %Od " or " %Oe
the day of the month using the locale's alternative numeric symbols;
leading zeros are permitted but not required.
.TP
.B %OH
the hour (24-hour clock) using the locale's alternative numeric symbols.
.TP
.B %OI
the hour (12-hour clock) using the locale's alternative numeric symbols.
.TP
.B %Om
the month using the locale's alternative numeric symbols.
.TP
.B %OM
the minutes using the locale's alternative numeric symbols.
.TP
.B %OS
the seconds using the locale's alternative numeric symbols.
.TP
.B %OU
the week number of the year (Sunday as the first day of the week)
using the locale's alternative numeric symbols.
.TP
.B %Ow
the number of the weekday (Sunday=0) using the locale's alternative
numeric symbols.
.TP
.B %OW
the week number of the year (Monday as the first day of the week)
using the locale's alternative numeric symbols.
.TP
.B %Oy
the year (offset from %C) using the locale's alternative numeric symbols. 
.LP
The broken-down time structure \fItm\fP is defined in \fI<time.h>\fP
as follows:
.sp
.RS
.nf
.ne 12
.ta 8n 16n 32n
struct tm
{
	int	tm_sec;			/* seconds */
	int	tm_min;			/* minutes */
	int	tm_hour;		/* hours */
	int	tm_mday;		/* day of the month */
	int	tm_mon;			/* month */
	int	tm_year;		/* year */
	int	tm_wday;		/* day of the week */
	int	tm_yday;		/* day in the year */
	int	tm_isdst;		/* daylight saving time */
};
.ta
.fi
.RE
.SH "RETURN VALUE"
The return value of the function is a pointer to the first character
not processed in this function call.  In case the input string
contains more characters than required by the format string the return
value points right after the last consumed input character.  In case
the whole input string is consumed the return value points to the NUL
byte at the end of the string.  If \fBstrptime()\fP fails to match all
of the format string and therefore an error occurred the function
returns \fBNULL\fP.
.SH NOTES
.LP
In principle, this function does not initialize \fBtm\fP but
only stores the values specified.
This means that \fBtm\fP should be initialized before the call.
Details differ a bit between different Unix systems.
The GNU libc implementation does not touch those fields which are not
explicitly specified, except that it recomputes the
.IR tm_wday
and
.IR tm_yday 
field if any of the year, month, or day elements changed.
.PP
This function is available since libc 4.6.8.
Linux libc4 and libc5 includes define the prototype unconditionally;
glibc2 includes provide a prototype only when _XOPEN_SOURCE or _GNU_SOURCE
are defined.
The E and O locale modifier characters are accepted since libc 5.4.13.
The 'y' (year in century) specification is taken to specify a year
in the 20th century by libc4 and libc5. It is taken to be a year
in the range 1950-2049 by glibc 2.0. It is taken to be a year in
1969-2068 by glibc 2.1.
.SH "SEE ALSO"
.BR time (2),
.BR scanf (3),
.BR setlocale (3),
.BR strftime (3)
