.\" Copyright (c) 2000 Andries Brouwer (aeb@cwi.nl)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.TH FENV 3  "12 August 2000" "Linux Manpage" "Linux Programmer's Manual"
.SH NAME
feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag,
fetestexcept, fegetenv, fegetround, feholdexcept, fesetround,
fesetenv, feupdateenv - C99 floating point rounding and exception handling
.SH SYNOPSIS
.nf
.B #include <fenv.h>
.sp
.BI "void feclearexcept(int " excepts );
.br
.BI "void fegetexceptflag(fexcept_t *" flagp ", int " excepts );
.br
.BI "void feraiseexcept(int " excepts );
.br
.BI "void fesetexceptflag(const fexcept_t *" flagp ", int " excepts );
.br
.BI "int fetestexcept(int " excepts );
.sp
.B "int fegetround(void);"
.br
.BI "int fesetround(int " rounding_mode );
.sp
.BI "void fegetenv(fenv_t *" envp );
.br
.BI "int feholdexcept(fenv_t *" envp );
.br
.BI "void fesetenv(const fenv_t *" envp );
.br
.BI "void feupdateenv(const fenv_t *" envp );
.fi
.SH DESCRIPTION
These eleven functions were defined in C99, and describe the handling
of floating point rounding and exceptions (overflow, zero-divide etc.).
.SS "Exception handling"
Exceptions are represented in two ways: as a single bit
(exception present/absent), and these bits correspond in some
implementation-defined way with bit positions in an integer,
and also as an opaque structure that may contain more information
about the exception (perhaps the code address where it occurred).
.LP
Each of the macros
.BR FE_DIVBYZERO ,
.BR FE_INEXACT ,
.BR FE_INVALID ,
.BR FE_OVERFLOW ,
.BR FE_UNDERFLOW
is defined when the implementation supports handling
of the corresponding exception, and if so then
define the corresponding bit(s), so that one can call
exception handling functions e.g. using the integer argument
.BR FE_OVERFLOW | FE_UNDERFLOW .
Other exceptions may be supported. The macro
.B FE_ALL_EXCEPT
is the bitwise OR of all bits corresponding to supported exceptions.
.PP
The
.B feclearexcept
function clears the supported exceptions represented by the bits
in its argument.
.LP
The
.B fegetexceptflag
function stores a representation of the exception flags represented
by the argument
.I excepts
in the opaque object pointed to by
.IR flagp .
.LP
The
.B feraiseexcept
function raises the supported exceptions represented by the bits in
.I excepts .
.LP
The
.B fesetexceptflag
function sets the complete status for the exceptions represented by
.I excepts
to the value pointed to by
.IR flagp .
This value must have been obtained by an earlier call of
.B fegetexceptflag
with a last argument that contained all bits in
.IR excepts .
.LP
The
.B fetestexcept
function returns a word in which the bits are set that were
set in the argument
.I excepts
and for which the corresponding exception is currently set.
.SS Rounding
Each of the macros
.BR FE_DOWNWARD ,
.BR FE_TONEAREST ,
.BR FE_TOWARDZERO ,
.BR FE_UPWARD
is defined when the implementation supports getting and setting
the corresponding rounding direction.
.LP
The
.B fegetround
function returns the macro corresponding to the current
rounding mode.
.LP
The
.B fesetround
function sets the rounding mode as specified by its argument
and returns zero when it was successful.
.SS "Floating point environment"
The entire floating point environment, including
control modes and status flags, can be handled
as one opaque object, of type
.I fenv_t .
The default environment is denoted by
.B FE_DFL_ENV
(of type
.IR "const fenv_t *" ).
.LP
The
.B fegetenv
function saves the current floating point environment in the
object pointed to by
.IR envp .
.LP
The
.B feholdexcept
function does the same, then clears all exception flags,
and sets a non-stop (continue on exceptions) mode,
if available. It returns zero when successful.
.LP
The
.B fesetenv
function restores the floating point environment from
the object pointed to by
.IR envp .
This object must be known to be valid, e.g., the result of a call to
.B fegetenv
or
.B feholdexcept
or equal to
.BR FE_DFL_ENV .
This call does not raise exceptions.
.LP
The
.B feupdateenv
function saves the currently raised exceptions in its automatic
storage, installs the floating-point environment represented by
the object pointed to by
.IR envp ,
and then raises the saved exceptions.
As before, the object pointed to by
.I envp
must be known to be valid.

