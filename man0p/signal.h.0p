.\" Copyright (c) 2001-2003 The Open Group, All Rights Reserved 
.TH "<signal.h>" P 2003 POSIX
.\" <signal.h> 
.SH NAME
signal.h - signals
.SH SYNOPSIS
.LP
\fB#include <signal.h>\fP
.SH DESCRIPTION
.LP
Some of the functionality described on this reference page extends
the ISO\0C standard. Applications shall define
the appropriate feature test macro (see the System Interfaces volume
of IEEE\0Std\01003.1-2001, Section 2.2, The Compilation Environment)
to enable the visibility of these symbols in this
header. 
.LP
The \fI<signal.h>\fP header shall define the following symbolic constants,
each of which expands to a distinct constant
expression of the type:
.sp
.RS
.nf

\fBvoid (*)(int)
\fP
.fi
.RE
.LP
whose value matches no declarable function.
.TP
SIG_DFL
Request for default signal handling.
.TP
SIG_ERR
Return value from \fIsignal\fP() in case of error.
.TP
SIG_HOLD
Request that signal be held. 
.TP
SIG_IGN
Request that signal be ignored.
.sp
.LP
The following data types shall be defined through \fBtypedef\fP:
.TP
\fBsig_atomic_t\fP
Possibly volatile-qualified integer type of an object that can be
accessed as an atomic entity, even in the presence of
asynchronous interrupts.
.TP
\fBsigset_t\fP
Integer or structure type of an object used to represent sets of signals.
.TP
\fBpid_t\fP
As
described in \fI<sys/types.h>\fP . 
.sp
.LP
The \fI<signal.h>\fP header shall define the \fBsigevent\fP structure,
which has at least the following members:
.sp
.RS
.nf

\fBint                    sigev_notify           \fP Notification type. \fB
int                    sigev_signo            \fP Signal number. \fB
union sigval           sigev_value            \fP Signal value. \fB
void(*)(union sigval)  sigev_notify_function  \fP Notification function. \fB
(pthread_attr_t *)     sigev_notify_attributes\fP Notification attributes. \fB
\fP
.fi
.RE
.LP
The following values of \fIsigev_notify\fP shall be defined:
.TP
SIGEV_NONE
No asynchronous notification is delivered when the event of interest
occurs.
.TP
SIGEV_SIGNAL
A queued signal, with an application-defined value, is generated when
the event of interest occurs.
.TP
SIGEV_THREAD
A notification function is called to perform notification.
.sp
.LP
The \fBsigval\fP union shall be defined as:
.sp
.RS
.nf

\fBint    sival_int   \fP Integer signal value. \fB
void  *sival_ptr   \fP Pointer signal value. \fB
\fP
.fi
.RE
.LP
This header shall also declare the macros SIGRTMIN and SIGRTMAX, which
evaluate to integer expressions, and specify a range of
signal numbers that are reserved for application use and for which
the realtime signal behavior specified in this volume of
IEEE\0Std\01003.1-2001 is supported. The signal numbers in this range
do not overlap any of the signals specified in the
following table.
.LP
The range SIGRTMIN through SIGRTMAX inclusive shall include at least
{RTSIG_MAX} signal numbers.
.LP
It is implementation-defined whether realtime signal behavior is supported
for other signals. 
.LP
This header also declares the constants that are used to refer to
the signals that occur in the system. Signals defined here
begin with the letters SIG. Each of the signals have distinct positive
integer values. The value 0 is reserved for use as the null
signal (see \fIkill\fP()). Additional implementation-defined signals
may occur in the
system.
.LP
The
ISO\0C standard only requires the signal names SIGABRT, SIGFPE, SIGILL,
SIGINT, SIGSEGV, and SIGTERM to be defined. 
.LP
The following signals shall be supported on all implementations (default
actions are explained below the table):
.TS C
center;l l l l l l l l l l l.
\fBSignal\fP 	 \fBDefault Action\fP 	 \fBDescription\fP 	
SIGABRT 	 A 	 Process abort signal. 	
SIGALRM 	 T 	 Alarm clock. 	
SIGBUS 	 A 	 Access to an undefined portion of a memory object. 	
SIGCHLD 	 I 	 Child process terminated, stopped, 	
\0 	 \0 	 or continued.  	
SIGCONT 	 C 	 Continue executing, if stopped. 	
SIGFPE 	 A 	 Erroneous arithmetic operation. 	
SIGHUP 	 T 	 Hangup. 	
SIGILL 	 A 	 Illegal instruction. 	
SIGINT 	 T 	 Terminal interrupt signal. 	
SIGKILL 	 T 	 Kill (cannot be caught or ignored). 	
SIGPIPE 	 T 	 Write on a pipe with no one to read it. 	
SIGQUIT 	 A 	 Terminal quit signal. 	
SIGSEGV 	 A 	 Invalid memory reference. 	
SIGSTOP 	 S 	 Stop executing (cannot be caught or ignored). 	
SIGTERM 	 T 	 Termination signal. 	
SIGTSTP 	 S 	 Terminal stop signal. 	
SIGTTIN 	 S 	 Background process attempting read. 	
SIGTTOU 	 S 	 Background process attempting write. 	
SIGUSR1 	 T 	 User-defined signal 1. 	
SIGUSR2 	 T 	 User-defined signal 2. 	
SIGPOLL 	 T 	 Pollable event. 	
SIGPROF 	 T 	 Profiling timer expired. 	
SIGSYS 	 A 	 Bad system call. 	
SIGTRAP 	 A 	 Trace/breakpoint trap.  	
SIGURG 	 I 	 High bandwidth data is available at a socket. 	
SIGVTALRM 	 T 	 Virtual timer expired. 	
SIGXCPU 	 A 	 CPU time limit exceeded. 	
SIGXFSZ 	 A 	 File size limit exceeded.  	
.TE
.LP
The default actions are as follows:
.TP
T
Abnormal termination of the process. The process is terminated with
all the consequences of \fI_exit\fP() except that the status made
available to \fIwait\fP() and \fIwaitpid\fP() indicates abnormal
termination by the specified signal.
.TP
A
Abnormal termination of the process.
.br
Additionally, implementation-defined abnormal termination actions,
such as creation of a \fBcore\fP file, may occur. 
.TP
I
Ignore the signal.
.TP
S
Stop the process.
.TP
C
Continue the process, if it is stopped; otherwise, ignore the signal.
.sp
.sp
.LP
The
header shall provide a declaration of \fBstruct sigaction\fP, including
at least the following members:
.sp
.RS
.nf

\fBvoid (*sa_handler)(int) \fP Pointer to a signal-catching function or one of the macros \fB
                        \fP SIG_IGN or SIG_DFL. \fB
sigset_t sa_mask        \fP Set of signals to be blocked during execution of the signal \fB
                        \fP handling function. \fB
int      sa_flags       \fP Special flags. \fB
void (*sa_sigaction)(int, siginfo_t *, void *)
                        \fP Pointer to a signal-catching function. \fB
\fP
.fi
.RE
.LP
The storage occupied by \fIsa_handler\fP and \fIsa_sigaction\fP may
overlap, and a conforming application shall not use both
simultaneously. 
.LP
The following shall be declared as constants:
.TP
SA_NOCLDSTOP
Do
not generate SIGCHLD when children stop 
.br
or
stopped children continue. 
.TP
SIG_BLOCK
The resulting set is the union of the current set and the signal set
pointed to by the argument \fIset\fP. 
.TP
SIG_UNBLOCK
The resulting set is the intersection of the current set and the complement
of the signal set pointed to by the argument
\fIset\fP. 
.TP
SIG_SETMASK
The resulting set is the signal set pointed to by the argument \fIset\fP.
.TP
SA_ONSTACK
Causes signal delivery to occur on an alternate stack. 
.TP
SA_RESETHAND
Causes signal dispositions to be set to SIG_DFL on entry to signal
handlers. 
.TP
SA_RESTART
Causes certain functions to become restartable. 
.TP
SA_SIGINFO
Causes extra information to be passed to signal handlers at the time
of receipt of a signal. 
.TP
SA_NOCLDWAIT
Causes implementations not to create zombie processes on child death.
.TP
SA_NODEFER
Causes signal not to be automatically blocked on entry to signal handler.
.TP
SS_ONSTACK
Process is executing on an alternate signal stack. 
.TP
SS_DISABLE
Alternate signal stack is disabled. 
.TP
MINSIGSTKSZ
Minimum stack size for a signal handler. 
.TP
SIGSTKSZ
Default size in bytes for the alternate signal stack. 
.sp
.LP
The \fBucontext_t\fP structure shall be defined through \fBtypedef\fP
as described in \fI<ucontext.h>\fP.
.LP
The \fBmcontext_t\fP type shall be defined through \fBtypedef\fP as
described in \fI<ucontext.h>\fP.
.LP
The \fI<signal.h>\fP header shall define the \fBstack_t\fP type as
a structure that includes at least the following
members:
.sp
.RS
.nf

\fBvoid     *ss_sp      \fP Stack base or pointer. \fB
size_t    ss_size    \fP Stack size. \fB
int       ss_flags   \fP Flags. \fB
\fP
.fi
.RE
.LP
The \fI<signal.h>\fP header shall define the \fBsigstack\fP structure
that includes at least the following members:
.sp
.RS
.nf

\fBint       ss_onstack \fP Non-zero when signal stack is in use. \fB
void     *ss_sp      \fP Signal stack pointer. \fB
\fP
.fi
.RE
.LP
The
\fI<signal.h>\fP header shall define the \fBsiginfo_t\fP type as a
structure that includes at least the following members:
.sp
.RS
.nf

\fB
int           si_signo \fP Signal number. \fB


int           si_errno \fP If non-zero, an \fIerrno\fP value associated with \fB
                       \fP this signal, as defined in \fB<errno.h>.\fP \fB


int           si_code  \fP Signal code. \fB


pid_t         si_pid   \fP Sending process ID. \fB
uid_t         si_uid   \fP Real user ID of sending process. \fB
void         *si_addr  \fP Address of faulting instruction. \fB
int           si_status\fP Exit value or signal. \fB
long          si_band  \fP Band event for SIGPOLL. \fB


union sigval  si_value \fP Signal value. \fB

\fP
.fi
.RE
.LP
The macros specified in the \fBCode\fP column of the following table
are defined for use as values of \fIsi_code\fP that are
\0signal-specific or  non-signal-specific reasons why the signal
was generated.
.TS C
center;l l l l l l l l l l l.
\fBSignal\fP 	 \fBCode\fP 	 \fBReason\fP 	
SIGILL 	 ILL_ILLOPC 	 Illegal opcode. 	
\0 	 ILL_ILLOPN 	 Illegal operand. 	
\0 	 ILL_ILLADR 	 Illegal addressing mode. 	
\0 	 ILL_ILLTRP 	 Illegal trap. 	
\0 	 ILL_PRVOPC 	 Privileged opcode. 	
\0 	 ILL_PRVREG 	 Privileged register. 	
\0 	 ILL_COPROC 	 Coprocessor error. 	
\0 	 ILL_BADSTK 	 Internal stack error. 	
SIGFPE 	 FPE_INTDIV 	 Integer divide by zero. 	
\0 	 FPE_INTOVF 	 Integer overflow. 	
\0 	 FPE_FLTDIV 	 Floating-point divide by zero. 	
\0 	 FPE_FLTOVF 	 Floating-point overflow. 	
\0 	 FPE_FLTUND 	 Floating-point underflow. 	
\0 	 FPE_FLTRES 	 Floating-point inexact result. 	
\0 	 FPE_FLTINV 	 Invalid floating-point operation. 	
\0 	 FPE_FLTSUB 	 Subscript out of range. 	
SIGSEGV 	 SEGV_MAPERR 	 Address not mapped to object. 	
\0 	 SEGV_ACCERR 	 Invalid permissions for mapped object. 	
SIGBUS 	 BUS_ADRALN 	 Invalid address alignment. 	
\0 	 BUS_ADRERR 	 Nonexistent physical address. 	
\0 	 BUS_OBJERR 	 Object-specific hardware error. 	
SIGTRAP 	 TRAP_BRKPT 	 Process breakpoint. 	
\0 	 TRAP_TRACE 	 Process trace trap. 	
SIGCHLD 	 CLD_EXITED 	 Child has exited. 	
\0 	 CLD_KILLED 	 Child has terminated abnormally and did not create a \fBcore\fP file. 	
\0 	 CLD_DUMPED 	 Child has terminated abnormally and created a \fBcore\fP file. 	
\0 	 CLD_TRAPPED 	 Traced child has trapped. 	
\0 	 CLD_STOPPED 	 Child has stopped. 	
\0 	 CLD_CONTINUED 	 Stopped child has continued. 	
SIGPOLL 	 POLL_IN 	 Data input available. 	
\0 	 POLL_OUT 	 Output buffers available. 	
\0 	 POLL_MSG 	 Input message available. 	
\0 	 POLL_ERR 	 I/O error. 	
\0 	 POLL_PRI 	 High priority input available. 	
\0 	 POLL_HUP 	 Device disconnected.  	
Any 	 SI_USER 	 Signal sent by \fIkill\fP(). 	
\0 	 SI_QUEUE 	 Signal sent by the \fIsigqueue\fP(). 	
\0 	 SI_TIMER 	 Signal generated by expiration of a timer set by \fItimer_settime\fP(). 	
\0 	 SI_ASYNCIO 	 Signal generated by completion of an asynchronous I/O request. 	
\0 	 SI_MESGQ 	 Signal generated by arrival of a message on an empty message queue.  	
.TE
.LP
Implementations may support additional \fIsi_code\fP values not included
in this list, may generate values included in this list
under circumstances other than those described in this list, and may
contain extensions or limitations that prevent some values
from being generated. Implementations do not generate a different
value from the ones described in this list for circumstances
described in this list.
.LP
In addition, the following signal-specific information shall be available:
.TS C
center;l l l l l l l l l l l.
\fBSignal\fP 	 \fBMember\fP 	 \fBValue\fP 	
SIGILL 	 \fBvoid * \fIsi_addr\fP\fP 	 Address of faulting instruction. 	
SIGFPE 	 \fB\0\fP 	 \0 	
SIGSEGV 	 \fBvoid * \fIsi_addr\fP\fP 	 Address of faulting memory reference. 	
SIGBUS 	 \fB\0\fP 	 \0 	
SIGCHLD 	 \fBpid_t \fIsi_pid\fP\fP 	 Child process ID. 	
\0 	 \fBint \fIsi_status\fP\fP 	 Exit value or signal. 	
\0 	 \fBuid_t \fIsi_uid\fP\fP 	 Real user ID of the process that sent the signal. 	
SIGPOLL 	 \fBlong \fIsi_band\fP\fP 	 Band event for POLL_IN, POLL_OUT, or POLL_MSG. 	
.TE
.LP
For some implementations, the value of \fIsi_addr\fP may be inaccurate.
.LP
The following shall be declared as functions and may also be defined
as macros:
.sp
.RS
.nf

\fB
void (*bsd_signal(int, void (*)(int)))(int);


int    kill(pid_t, int);


int    killpg(pid_t, int);


int    pthread_kill(pthread_t, int);
int    pthread_sigmask(int, const sigset_t *, sigset_t *);

int    raise(int);

int    sigaction(int, const struct sigaction *restrict,
           struct sigaction *restrict);
int    sigaddset(sigset_t *, int);


int    sigaltstack(const stack_t *restrict, stack_t *restrict);


int    sigdelset(sigset_t *, int);
int    sigemptyset(sigset_t *);
int    sigfillset(sigset_t *);


int    sighold(int);
int    sigignore(int);
int    siginterrupt(int, int);


int    sigismember(const sigset_t *, int);

void (*signal(int, void (*)(int)))(int);

int    sigpause(int);


int    sigpending(sigset_t *);
int    sigprocmask(int, const sigset_t *restrict, sigset_t *restrict);


int    sigqueue(pid_t, int, const union sigval);


int    sigrelse(int);
void (*sigset(int, void (*)(int)))(int);


int    sigsuspend(const sigset_t *);


int    sigtimedwait(const sigset_t *restrict, siginfo_t *restrict,
           const struct timespec *restrict);


int    sigwait(const sigset_t *restrict, int *restrict);


int    sigwaitinfo(const sigset_t *restrict, siginfo_t *restrict);

\fP
.fi
.RE
.LP
Inclusion of the \fI<signal.h>\fP header may make visible all symbols
from the \fI<time.h>\fP header. 
.LP
\fIThe following sections are informative.\fP
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fI<errno.h>\fP , \fI<stropts.h>\fP , \fI<sys/types.h>\fP , \fI<time.h>\fP
, \fI<ucontext.h>\fP , the System Interfaces volume of IEEE\0Std\01003.1-2001,
\fIalarm\fP(), \fIbsd_signal\fP(), \fIioctl\fP(), \fIkill\fP(), \fIkillpg\fP(),
\fIraise\fP(), \fIsigaction\fP(), \fIsigaddset\fP(), \fIsigaltstack\fP(),
\fIsigdelset\fP(), \fIsigemptyset\fP(), \fIsigfillset\fP(), \fIsiginterrupt\fP(),
\fIsigismember\fP(), \fIsignal\fP(), \fIsigpending\fP(), \fIsigprocmask\fP(),
\fIsigqueue\fP(), \fIsigsuspend\fP(), \fIsigwaitinfo\fP(), \fIwait\fP(),
\fIwaitid\fP()
.SH COPYRIGHT
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
-- Portable Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group. In the
event of any discrepancy between this version and the original IEEE and
The Open Group Standard, the original IEEE and The Open Group Standard
is the referee document. The original Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
