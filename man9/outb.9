.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1995 Paul Gortmaker
.\" (gpg109@rsphy1.anu.edu.au)
.\" Wed Nov 29 10:58:54 EST 1995
.\" 
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\"
.TH OUTB 9 "November 29, 1995" "Linux" "Linux Programmer's Manual"
.SH NAME
outb, outw, outl, outsb, outsw, outsl \- port output
.br
inb, inw, inl, insb, insw, insl \- port input
.br
outb_p, outw_p, outl_p, inb_p, inw_p, inl_p \- paused I/O
.SH SYNOPSIS
.B #include <asm/io.h>
.sp
.BI "void outb(unsigned char " value ", unsigned short " port);
.br
.BI "void outw(unsigned short " value ", unsigned short " port);
.br
.BI "void outl(unsigned int " value ", unsigned short " port);
.sp
.BI "void outsb(unsigned short " port ", const void " *addr ", unsigned long " count);
.br
.BI "void outsw(unsigned short " port ", const void " *addr ", unsigned long " count);
.br
.BI "void outsl(unsigned short " port ", const void " *addr ", unsigned long " count);
.sp
.BI "unsigned char inb(unsigned short " port);
.br
.BI "unsigned short inw(unsigned short " port);
.br
.BI "unsigned long inl(unsigned short " port);
.sp
.BI "void insb(unsigned short " port ", void " *addr ", unsigned long " count);
.br
.BI "void insw(unsigned short " port ", void " *addr ", unsigned long " count);
.br
.BI "void insl(unsigned short " port ", void " *addr ", unsigned long " count);
.sp
.SH DESCRIPTION
These inline macros are used to do low level port input and output.
The single data element
.I outX()
series write out \fBvalue\fP to \fBport\fP. The multiple value
.I outsX()
series write \fBcount\fP data elements starting from \fBaddr\fP to \fBport\fP.
The single data element
.I inX()
series read a value from \fBport\fP. The multiple data element
.I insX()
series read \fBcount\fP data elements into \fBaddr\fP from \fBport\fP.
.sp
The pausing versions of the single data element series
.I XXX_p()
are identical in behaviour, except that 
.I after
performing the I/O, a
.I SLOW_DOWN_IO
is appended. This expands to a dummy write to port 0x80 (usually
only used by BIOS for output of diagnostics at POST) which inserts
a delay equivalent to one I/O cycle.
.sp
Note that the 
.I asm
in \fB<asm/io.h>\fP is actually a symlink to 
.I asm-<hardware_type> 
that is only created after running
.I make config
on the kernel source tree.


.SH "RETURN VALUE"
Only the single value 
.I inX()
functions return the value read from the port.
.SH "CONFORMING TO"
\fBoutb\fP and friends are hardware specific. The 
.I port
and 
.I value
arguments are in the opposite order to most DOS implementations.
.SH "SEE ALSO"
.BR request_region (9),
.BR release_region (9),
.BR check_region (9),
.BR outb (2),
.BR ioperm (2),
.BR iopl (2)
.SH "AUTHOR"
Paul Gortmaker
